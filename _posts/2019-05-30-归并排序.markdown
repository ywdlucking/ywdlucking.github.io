---
layout:     post
title:      "归并排序"
subtitle:   " \"算法很重要\""
date:       2019-05-30 16:00:00
author:     "Dong"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 算法
---

## 描叙
归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之)。

## 思路
<center>
    <img src="https://github.com/ywdlucking/ywdlucking.github.io/raw/master/context-picture/merge.png">
</center>
可以看到这种结构很像一棵完全二叉树，归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。


## 代码
```java
package algorithm;

import java.util.Arrays;

/**
 * Created by admin on 2019/5/30.
 */
public class MegreSort {

    public static void main(String[] args) {
        int[] a = {8,4,5,7,1,3,6,2};
        int[] tmp = new int[a.length];
        int s = 0;
        int e = a.length-1;
        divide(a, s, e, tmp);
        System.out.println("结果: "+Arrays.toString(a));
    }

    static void divide(int[]a, int start, int end, int[] tmp) {
        if(start<end){
            int mid = (start+end)/2;
            divide(a, start, mid, tmp);
            divide(a,mid+1,end, tmp);
            merge(a, start, mid, end, tmp);
        }

    }

    private static void merge(int[] a, int start, int mid, int end, int[] tmp) {
        int i = start;
        int j = mid+1;
        int t=0;
        while (i<=mid && j<=end){
            if (a[i]<=a[j]){
                tmp[t++]=a[i++];
            }else {
                tmp[t++]=a[j++];
            }
        }

        while (i<=mid) {
            tmp[t++]=a[i++];
        }

        while (j<=end) {
            tmp[t++]=a[j++];
        }

        t=0;
        while (start<=end) {
            a[start++] = tmp[t++];
        }
        System.out.println(Arrays.toString(a));
    }
}


```

## 算法分析
归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。